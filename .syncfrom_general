#!/bin/bash -e

export b=$(tput bold)   # bold text
export n=$(tput sgr0)   # normal text
export yellow="\033[1;33;40m"   # yellow text

#
echo -e "\n${b}Settings:${n}"
if [[ "$rsync_progress_mode" != "detail" ]]; then
    rsync_progress_mode="short"
fi
echo -e "\t rsync_progress_mode:\t\t\t'${b}${rsync_progress_mode}${n}'"
if [[ "y" == "$symlinks_auto_continue" || "Y" == "$symlinks_auto_continue" \
  || "yes" == "$symlinks_auto_continue" || "YES" == "$symlinks_auto_continue" \
  || "true" == "$symlinks_auto_continue" || "TRUE" == "$symlinks_auto_continue" ]]; then
    symlinks_auto_continue="true"
else
    symlinks_auto_continue="false"
fi
echo -e "\t symlinks_auto_continue:\t'${b}${symlinks_auto_continue}${n}'"

#
echo -e "\n${b}Input args:${n}"
echo -e "\t syncFrom_host: '${b}${syncFrom_host}${n}'"
echo -e "\t syncFrom_port: '${b}${syncFrom_port}${n}'"
echo -e "\t syncFrom_path: '${b}${syncFrom_path}${n}'"
echo -e "\t syncTo_host:   '${b}${syncTo_host}${n}'"
echo -e "\t syncTo_port:   '${b}${syncTo_port}${n}'"
echo -e "\t syncTo_path:   '${b}${syncTo_path}${n}'"
if [[ -z "${syncFrom_path}" ]]; then
    if [[ -z "${syncTo_path}" ]]; then
        echo "ERROR: 'syncFrom_path' or 'syncTo_path' should be set"
        exit 1
    elif [[ "${syncTo_path: -1}" == "/" ]]; then
        # syncTo_path: shouldn't end with '/'
        export syncTo_path="${syncTo_path::-1}"
    fi
else
    if [[ -n "${syncTo_path}" ]]; then
        echo "ERROR: only one of 'syncFrom_path' or 'syncTo_path' should be set"
        exit 1
    fi
    if [[ "${syncFrom_path: -1}" == "/" ]]; then
        # syncFrom_path: shouldn't end with '/'
        export syncFrom_path="${syncFrom_path::-1}"
    fi
fi
echo -e "\n${b}Items for sync:${n}"
items4sync=$(echo "$items4sync" | tr '\n' ' ')
IFS=' ' read -r -a items4sync <<< "$items4sync"
if [ ${#items4sync[@]} -eq 0 ]; then
    echo "ERROR: array 'items4sync' is empty"
    exit 1
else
    for ((i=0; i < ${#items4sync[@]}; i++)); do
        # remove lead spaces or tabs
        items4sync[$i]=$(echo "${items4sync[$i]}" | sed 's/^[ \t]\+//')

        if [[ "${items4sync[$i]: -1}" == "/" ]]; then
            # the path shouldn't end with '/'
            items4sync[$i]="${items4sync[$i]::-1}"
        fi

        # Prepare syncFrom_path_items => syncTo_path_items
        if [[ -z "${syncFrom_path}" ]]; then
            syncFrom_path_items[$i]="${items4sync[$i]}"
            syncTo_path_items[$i]="${syncTo_path}/"
        else
            syncFrom_path_items[$i]="${syncFrom_path}"/$(echo "${items4sync[$i]}" | sed "s/.*\///")
            syncTo_path_items[$i]="$(dirname "${items4sync[$i]}")/"
        fi
        echo -e "\t${syncFrom_path_items[$i]} => ${syncTo_path_items[$i]}"
    done
fi
export mode=""
if [[ -n "${syncFrom_host}" && -n "${syncFrom_port}" \
   && -n "${syncTo_host}"   && -n "${syncTo_port}" ]]; then
      mode="remote"
      if [[ "$syncFrom_host" == "localhost" ]]; then
          syncFrom_host="127.0.0.1"
      fi
      if [[ "$syncTo_host" == "localhost" ]]; then
          syncTo_host="127.0.0.1"
      fi
      if [[ "$syncFrom_host" != "127.0.0.1" && "$syncTo_host" != "127.0.0.1" ]]; then
           echo "ERROR: rsync: The source and destination cannot both be remote"
           exit 1
      fi
else
    mode="local"
fi

echo -e "\n${b}Mode:${n} $mode\n"
ssh_prefix_syncTo=""
ssh_prefix_syncFrom=""
ssh_postfix=''
if [[ "$mode" == "remote" ]]; then
    ssh_prefix_syncTo="ssh -p $syncTo_port $syncTo_host -x \""
    ssh_prefix_syncFrom="ssh -p $syncFrom_port $syncFrom_host -x \""
    ssh_postfix='"'
fi

rsync_progress_opts="--info=progress2 --no-inc-recursive"
if [[ "$rsync_progress_mode" == "detail" ]]; then
    rsync_progress_opts="--progress -v"
fi

#
printf "${b}Check symlinks (top levels only)... ${n}"
for ((i=0; i < ${#items4sync[@]}; i++)); do
    symlink_path_f=$(eval ${ssh_prefix_syncFrom}find "${syncFrom_path_items[$i]}" -maxdepth 1 -type l${ssh_postfix})
    for cur_path_f in $symlink_path_f; do
        printf "\n\t${yellow}It's a symlink:${n} ${b}$cur_path_f${n}"
    done
    if [ "$symlink_path_f" != "" ]; then
        echo -e "\n\tNOTE: All symlinks will be copied as symlinks. Files (to which symlink links to) won't be copied."
        if [[ "$symlinks_auto_continue" != "true" ]]; then
            printf "\tPress <Enter> to continue"; read
        fi
    fi
done
echo "done."
echo

#
echo -e "${b}Synchronization:${n}"
for ((i=0; i < ${#items4sync[@]}; i++)); do
    echo -e "\t${b}sync item \"${syncFrom_path_items[$i]}\" => \"${syncTo_path_items[$i]}\":${n}"

    syncFrom_host_holder=""
    syncTo_host_holder=""
    port_holder=""
    if [[ "$syncFrom_host" == "127.0.0.1" ]]; then
        syncTo_host_holder="$syncTo_host:"
        port_holder="--rsh=\"ssh -p $syncTo_port\""
    elif [[ "$syncTo_host" == "127.0.0.1" ]]; then
        syncFrom_host_holder="$syncFrom_host:"
        port_holder="--rsh=\"ssh -p $syncFrom_port\""
    fi

    eval rsync $port_holder -a --delete $rsync_progress_opts ${syncFrom_host_holder}"${syncFrom_path_items[$i]}" \
                                                             ${syncTo_host_holder}"${syncTo_path_items[$i]}/"
done

sync
echo -e "\ndone.\n"
